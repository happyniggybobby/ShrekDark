// Cooldown storage
const cooldowns = {}; 
let commandsEnabled = JSON.parse(localStorage.getItem("commandsEnabled")) ?? true;

// Create a toggle button in the top-right corner
const toggleButton = document.createElement("button");
toggleButton.innerText = commandsEnabled ? "Disable Commands" : "Enable Commands";
toggleButton.style.position = "fixed";
toggleButton.style.top = "10px";
toggleButton.style.right = "10px";
toggleButton.style.zIndex = "9999";
toggleButton.style.padding = "5px 10px";
toggleButton.style.background = "#444";
toggleButton.style.color = "#fff";
toggleButton.style.border = "none";
toggleButton.style.cursor = "pointer";

document.body.appendChild(toggleButton);

// Toggle function
toggleButton.addEventListener("click", () => {
    commandsEnabled = !commandsEnabled;
    localStorage.setItem("commandsEnabled", JSON.stringify(commandsEnabled));
    toggleButton.innerText = commandsEnabled ? "Disable Commands" : "Enable Commands";
    sendFunnyChat(`Chat commands are now ${commandsEnabled ? "enabled" : "disabled"}.`);
});

// Load guest players from localStorage
const getGuests = () => {
    return JSON.parse(localStorage.getItem("guestPlayers")) || [];
};

// Save new guests
const addGuest = (player) => {
    let guests = getGuests();
    if (!guests.includes(player)) {
        guests.push(player);
        localStorage.setItem("guestPlayers", JSON.stringify(guests));
    }
};

// Rank system (Admins & Mods are manually set)
const playerRanks = {
    "Owner": ["JohnDoe"],  
    "Admin": ["Alice", "Bob"],
    "Mod": ["Charlie", "Dave"]
};

// Get banned players from localStorage
const getBannedPlayers = () => JSON.parse(localStorage.getItem("bannedPlayers")) || [];
const isBanned = (player) => getBannedPlayers().includes(player);

// Ban/unban functions
const banPlayer = (player) => {
    let banned = getBannedPlayers();
    if (!banned.includes(player)) {
        banned.push(player);
        localStorage.setItem("bannedPlayers", JSON.stringify(banned));
        sendFunnyChat(`${player} has been banned.`);
    } else {
        sendFunnyChat(`${player} is already banned.`);
    }
};
const unbanPlayer = (player) => {
    let banned = getBannedPlayers();
    if (banned.includes(player)) {
        banned = banned.filter(name => name !== player);
        localStorage.setItem("bannedPlayers", JSON.stringify(banned));
        sendFunnyChat(`${player} has been unbanned.`);
    } else {
        sendFunnyChat(`${player} is not banned.`);
    }
};

// Get player rank
const getPlayerRank = (player) => {
    if (getBannedPlayers().includes(player)) return "Banned";
    for (const [rank, players] of Object.entries(playerRanks)) {
        if (players.includes(player)) return rank;
    }
    if (getGuests().includes(player)) return "Guest";
    return "Unranked";
};

// Assign guest rank if they send a command for the first time
const ensureGuestRank = (player) => {
    if (getPlayerRank(player) === "Unranked") {
        addGuest(player);
        sendFunnyChat(`${player} has been assigned as a Guest.`);
    }
};

// Permission check
const hasPermission = (player, requiredRanks) => {
    return requiredRanks.includes(getPlayerRank(player));
};

// Get the sender's username, remove tags like [Crew] and [Captain]
const getSenderName = (mess) => {
    const match = mess.innerHTML.match(/<b>(.*?)<\/b>/);
    if (!match) return "unknown";
    return match[1].replace(/\[.*?\]\s*/g, "").trim(); 
};

// Fishing minigame storage
const fishingAttempts = {};

// Chat observer
observeNode(chatContent, () => {
    const mess = document.querySelector("#chat-content > p:last-of-type");
    if (!mess) return;
    const player = getSenderName(mess);
    if (isBanned(player)) return;
    if (!commandsEnabled) return;

    ensureGuestRank(player); // Assigns "Guest" if the player isn't ranked

    if (mess.textContent.startsWith('?ban ')) {
        if (!hasPermission(player, ["Owner", "Admin", "Mod"])) return sendFunnyChat(`${player}, you do not have permission.`);
        const target = mess.textContent.split(' ')[1];
        if (!target) return sendFunnyChat(`${player}, please specify a player to ban.`);
        banPlayer(target);
    }

    if (mess.textContent.startsWith('?unban ')) {
        if (!hasPermission(player, ["Owner", "Admin", "Mod"])) return sendFunnyChat(`${player}, you do not have permission.`);
        const target = mess.textContent.split(' ')[1];
        if (!target) return sendFunnyChat(`${player}, please specify a player to unban.`);
        unbanPlayer(target);
    }

    if (mess.textContent.startsWith('?fish')) {
        sendFunnyChat(`${player}, type 'shake' 7 times in the next 15 seconds to catch the fish!`);
        fishingAttempts[player] = 0;
        setTimeout(() => {
            if (fishingAttempts[player] < 7) {
                sendFunnyChat(`${player} failed to catch the fish!`);
                delete fishingAttempts[player];
            }
        }, 15000);
    }

    if (mess.textContent.toLowerCase() === 'shake') {
        if (fishingAttempts[player] !== undefined) {
            fishingAttempts[player]++;
            if (fishingAttempts[player] >= 7) {
                sendFunnyChat(`${player} successfully caught the fish!`);
                delete fishingAttempts[player];
            }
        }
    }
}, true, { childList: true, attributes: false, subtree: false });
