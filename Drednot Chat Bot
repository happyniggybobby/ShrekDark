const players = {};
const fishTypes = {
    common: ["Goldfish", "Carp", "Bass", "Perch", "Snapper", "Catfish", "Tilapia", "Mackerel", "Trout", "Bream", "Sardine", "Anchovy", "Minnow", "Herring", "Goby", "Mullet", "Chub", "Dace", "Roach", "Smelt"],
    uncommon: ["Trout", "Pike", "Salmon", "Catfish", "Bass", "Crappie", "Shad", "Bluegill", "Barramundi", "Walleye", "Yellow Perch", "Silver Carp", "Red Drum", "Sheepshead", "Drumfish", "Rockfish", "White Bass", "Striped Bass", "Moonfish", "Cuttlefish"],
    rare: ["Swordfish", "Piranha", "Salmon", "Rainbow Trout", "Tuna", "Blue Marlin", "Guppy", "Lionfish", "Barracuda", "Triggerfish", "Parrotfish", "Needlefish", "Flying Fish", "Mahimahi", "Cobia", "Gilt-head Bream", "Giant Trevally", "Opah", "Scorpionfish", "Bonefish"],
    legendary: ["Shark", "Electric Eel", "Blue Marlin", "Sea Dragon", "Megalodon", "Swordfish", "Giant Manta Ray", "Abyssal Angler", "Giant Oarfish", "Colossal Squid", "Whale Shark", "Giant Grouper", "Goliath Tigerfish", "Vampire Squid", "Ghost Shark", "Titanic Moray", "Phantom Barracuda", "Kraken's Fang", "Thunderous Leviathan", "Deep Sea Horror"],
    mythical: ["Kraken Tentacle", "Dragonfish", "Nautilus", "Sea Serpent", "Atlantean Whale", "Leviathan Fry", "Celestial Ray", "Aetheric Sturgeon", "Eldritch Angler", "Ancient Abyssal", "Cosmic Coelacanth", "Voidfish", "Spectral Manta", "Ethereal Prowler", "Shadow Leviathan", "Abyssal Phantom", "Starborn Guppy", "Temporal Carp", "Echoing Eel", "Dreadfin"],
    godly: ["Poseidon's Pet", "Celestial Whale", "Leviathan", "Titanic Sea Serpent", "Oceanic Phoenix", "Primordial Megalodon", "Eternal Kraken", "Infinity Manta", "Aurora Dragonfish", "Cosmic Leviathan", "Stellar Nautilus", "Divine Serpent", "Empyrean Abyssal", "Heavenly Sturgeon", "Radiant Ray", "Chrono Carp", "Transcendent Marlin", "Holy Angler", "Omnipotent Piranha", "Genesis Whale"]
};

function getRandomFish() {
    const rarity = Object.keys(fishTypes)[Math.floor(Math.random() * 6)];
    const fish = fishTypes[rarity][Math.floor(Math.random() * fishTypes[rarity].length)];
    return { fish, rarity };
}

function registerPlayer(name) {
    players[name] = { fish: [], streak: 0 };
    return `You logged in ${name}`;
}

function catchFish(name) {
    const { fish, rarity } = getRandomFish();
    players[name].fish.push({ fish, rarity });
    return `You caught a ${fish} (${rarity})`;
}

function listFish(name) {
    return players[name].fish.map(f => `${f.fish} (${f.rarity})`).join(', ') || 'No fish caught.';
}

function gamble(name) {
    const roll = (Math.random() * 10).toFixed(2);
    return `${name} rolled a ${roll}`;
}

function checkStreak(name) {
    return `Your current streak is ${players[name].streak}`;
}

function trade(item, playerName) {
    return `You are attempting to trade ${item} with ${playerName}. Waiting for approval... say yes or no.`;
}

function handleCommand(command, playerName) {
    console.log(`Processing command: ${command} from ${playerName}`);

    switch (command.trim().toLowerCase()) {
        case '!register': return registerPlayer(playerName);
        case '!fish': return catchFish(playerName);
        case '!gamble': return gamble(playerName);
        case '!streak': return checkStreak(playerName);
        case '!trade': return `${playerName} wants to trade!`;
        case '!commands': return "Available commands: !fish, !gamble, !streak, !trade";
    }
}

function parseChatMessage(message) {
    const pattern = /\[([^\]]+)\] <span style="color: #[^"]+">([^:]+)<\/span>: (.+)/;
    const match = message.match(pattern);
    if (match) {
        return {
            timestamp: match[1],
            username: match[2],
            content: match[3]
        };
    }
    return null;
}

function monitorChat() {
    const chatBox = document.querySelector('.chat-scrollable-inner');
    if (!chatBox) {
        console.log('Error: Chat box not found. Retrying in 2 seconds...');
        setTimeout(monitorChat, 2000);
        return;
    }

    console.log('Chat monitor started.');
    const observer = new MutationObserver(mutations => {
        mutations.forEach(mutation => {
            mutation.addedNodes.forEach(node => {
                if (node.nodeType === Node.ELEMENT_NODE) {
                    const message = node.innerText.trim();
                    console.log(`New message detected: ${message}`);
                    const parsedMessage = parseChatMessage(message);
                    if (parsedMessage) {
                        const { username, content } = parsedMessage;
                        console.log(`Parsed message: ${content} from ${username}`);
                        if (content.startsWith('!')) {
                            console.log(`Command detected: ${content}`);
                            const response = handleCommand(content, username);
                            if (response) sendChatMessage(response);
                        }
                    }
                }
            });
        });
    });

    observer.observe(chatBox, { childList: true, subtree: true });
}

function sendChatMessage(message) {
    // Ensure the chat input is available
    const chatInput = document.querySelector('.chat-input');
    if (!chatInput) {
        console.log('Error: Chat input not found.');
        return;
    }

    console.log(`Sending message: ${message}`);
    // Assuming you have a mechanism to send messages in the game
    chatInput.value = message;
    const event = new Event('input', { bubbles: true });
    chatInput.dispatchEvent(event);

    const submitButton = document.querySelector('.chat-submit-button');
    if (submitButton) {
        submitButton.click();
    } else {
        console.log('Error: Chat submit button not found.');
    }
}

window.onload = () => {
    setTimeout(() => {
        monitorChat();
        console.log('Drednot Command Script loaded and ready.');
    }, 2000);
};


